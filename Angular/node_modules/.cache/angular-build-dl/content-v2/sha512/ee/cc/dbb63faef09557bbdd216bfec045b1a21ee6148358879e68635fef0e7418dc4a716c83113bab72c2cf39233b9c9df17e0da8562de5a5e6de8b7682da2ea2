{"version":3,"sources":["webpack:///src/app/pages/tables/legalizacion/customerservice.ts","webpack:///src/app/services/excel.services.ts"],"names":["CustomerService","http","get","toPromise","then","res","data","EXCEL_EXTENSION","EXCEL_TYPE","ExcelExportService","_utilsService","_tableService","LEGALIZACION","PROMESA","SUBSIDIO","SEGUIMIENTO_SUBSIDIO","ENTREGA","DESEMBOLSO","RECAUDO","TRAZABILIDAD","ORDENES","RENOVACION","ESCRITURACION","json","excelFileName","reportType","console","log","map","element","keys","Object","length","forEach","key","isColumnDate","fechaFormat","Date","getDate","getMonth","getFullYear","getHeaders","toString","subscribe","headers","index","push","worksheet","json_to_sheet","header","workbook","Sheets","SheetNames","excelBuffer","bookType","type","saveAsExcelFile","err","buffer","fileName","Blob","getTime","name","camposFecha"],"mappings":"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","file":"common-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Customer } from './customer';\n\n@Injectable()\nexport class CustomerService {\n    constructor(private http: HttpClient) { }\n\n    getCustomersLarge() {\n        return this.http.get<any>('assets/customers-large.json')\n            .toPromise()\n            .then(res => <Customer[]>res.data)\n            .then(data => { return data; });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { TableService } from './table.service';\nimport { UtilsService } from './utils.services';\nconst EXCEL_EXTENSION = '.xlsx';\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n// import * as campos_fechas from 'src/assets/json/campos_fechas.json';\n\n\n@Injectable()\nexport class ExcelExportService {\n\n  LEGALIZACION: number = 1;\n  PROMESA: number = 2;\n  SUBSIDIO: number = 3;\n  SEGUIMIENTO_SUBSIDIO: number = 4;\n  ENTREGA: number = 5;\n  DESEMBOLSO: number = 6;\n  RECAUDO: number = 7;\n  TRAZABILIDAD: number = 8;\n  ORDENES: number = 9;\n  RENOVACION: number = 10;\n  ESCRITURACION: number = 11;\n\n  constructor(\n    private _utilsService: UtilsService,\n    private _tableService: TableService\n  ) { }\n  public exportAsExcelFile(json: any[], excelFileName: string, reportType: number): void {\n\n    console.log('contendio a exportar reportType', reportType);\n    json = json.map((element: any) => {\n      var keys: any = Object.keys(element);\n      // console.log(keys);\n      if (keys.length > 0) {\n        keys.forEach((key: any) => {\n          // console.log(key);\n          // element[key] = evt[key];\n          if (this.isColumnDate(key) && element[key] != null) {\n            let fechaFormat: Date = new Date(element[key]);\n            element[key] = (fechaFormat.getDate() < 10 ? '0' + fechaFormat.getDate() : fechaFormat.getDate()) + '-' + (fechaFormat.getMonth() < 9 ? '0' + (fechaFormat.getMonth() + 1) : (fechaFormat.getMonth() + 1)) + '-' + fechaFormat.getFullYear();\n          }\n        })\n      }\n\n      return element;\n    })\n\n\n    this._tableService.getHeaders(reportType.toString())\n    .subscribe(\n      (data:any)=>{\n        data = data.data;\n\n        let headers = [];\n        for (let index = 0; index < data.length; index++) {\n          const element = data[index];\n          if(element != 'UNI_ID' && element != 'VTA_ID' && element != 'PRY_ID'){\n            headers.push(element);\n          }\n        }\n        console.log('####headerssss ',headers);\n        const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json, { header: headers });\n        const workbook: XLSX.WorkBook = { Sheets: { 'Sheet1': worksheet }, SheetNames: ['Sheet1'] };\n        const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n        this.saveAsExcelFile(excelBuffer, excelFileName);\n      },err=>{\n        console.log('####headerssss ',err);\n      }\n    )\n  }\n\n  private saveAsExcelFile(buffer: any, fileName: string): void {\n    const data: Blob = new Blob([buffer], {\n      type: EXCEL_TYPE\n    });\n    FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n  }\n\n  private isColumnDate(name: string) {\n    for (let index = 0; index < this._utilsService.camposFecha.length; index++) {\n      const element = this._utilsService.camposFecha[index];\n      if (element == name) {\n        return true;\n      }\n    }\n    return false;\n  }\n}"]}