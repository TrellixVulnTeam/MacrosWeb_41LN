{"version":3,"sources":["./src/app/pages/tables/legalizacion/customerservice.ts","./src/app/services/excel.services.ts"],"names":[],"mappings":"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","file":"common-es2015.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Customer } from './customer';\n\n@Injectable()\nexport class CustomerService {\n    constructor(private http: HttpClient) { }\n\n    getCustomersLarge() {\n        return this.http.get<any>('assets/customers-large.json')\n            .toPromise()\n            .then(res => <Customer[]>res.data)\n            .then(data => { return data; });\n    }\n}\n","import { Injectable } from '@angular/core';\nimport * as FileSaver from 'file-saver';\nimport * as XLSX from 'xlsx';\nimport { TableService } from './table.service';\nimport { UtilsService } from './utils.services';\nconst EXCEL_EXTENSION = '.xlsx';\nconst EXCEL_TYPE = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n// import * as campos_fechas from 'src/assets/json/campos_fechas.json';\n\n\n@Injectable()\nexport class ExcelExportService {\n\n  LEGALIZACION: number = 1;\n  PROMESA: number = 2;\n  SUBSIDIO: number = 3;\n  SEGUIMIENTO_SUBSIDIO: number = 4;\n  ENTREGA: number = 5;\n  DESEMBOLSO: number = 6;\n  RECAUDO: number = 7;\n  TRAZABILIDAD: number = 8;\n  ORDENES: number = 9;\n  RENOVACION: number = 10;\n  ESCRITURACION: number = 11;\n\n  constructor(\n    private _utilsService: UtilsService,\n    private _tableService: TableService\n  ) { }\n  public exportAsExcelFile(json: any[], excelFileName: string, reportType: number): void {\n\n    console.log('contendio a exportar reportType', reportType);\n    json = json.map((element: any) => {\n      var keys: any = Object.keys(element);\n      // console.log(keys);\n      if (keys.length > 0) {\n        keys.forEach((key: any) => {\n          // console.log(key);\n          // element[key] = evt[key];\n          if (this.isColumnDate(key) && element[key] != null) {\n            let fechaFormat: Date = new Date(element[key]);\n            element[key] = (fechaFormat.getDate() < 10 ? '0' + fechaFormat.getDate() : fechaFormat.getDate()) + '-' + (fechaFormat.getMonth() < 9 ? '0' + (fechaFormat.getMonth() + 1) : (fechaFormat.getMonth() + 1)) + '-' + fechaFormat.getFullYear();\n          }\n        })\n      }\n\n      return element;\n    })\n\n\n    this._tableService.getHeaders(reportType.toString())\n    .subscribe(\n      (data:any)=>{\n        data = data.data;\n\n        let headers = [];\n        for (let index = 0; index < data.length; index++) {\n          const element = data[index];\n          if(element != 'UNI_ID' && element != 'VTA_ID' && element != 'PRY_ID'){\n            headers.push(element);\n          }\n        }\n        console.log('####headerssss ',headers);\n        const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(json, { header: headers });\n        const workbook: XLSX.WorkBook = { Sheets: { 'Sheet1': worksheet }, SheetNames: ['Sheet1'] };\n        const excelBuffer: any = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n        this.saveAsExcelFile(excelBuffer, excelFileName);\n      },err=>{\n        console.log('####headerssss ',err);\n      }\n    )\n  }\n\n  private saveAsExcelFile(buffer: any, fileName: string): void {\n    const data: Blob = new Blob([buffer], {\n      type: EXCEL_TYPE\n    });\n    FileSaver.saveAs(data, fileName + '_export_' + new Date().getTime() + EXCEL_EXTENSION);\n  }\n\n  private isColumnDate(name: string) {\n    for (let index = 0; index < this._utilsService.camposFecha.length; index++) {\n      const element = this._utilsService.camposFecha[index];\n      if (element == name) {\n        return true;\n      }\n    }\n    return false;\n  }\n}"],"sourceRoot":"webpack:///"}